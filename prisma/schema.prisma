generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  contexts      Context[]

  documents     Document[]

  applicant     Applicant?
  stageChanges  ApplicationStageHistory[]

  @@map("users")
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Context {
  id             Int       @id @default(autoincrement())
  jobDescription String
  localLanguage  String    @default("english") @db.VarChar(20)
  userId         Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents      ContextDocument[]
  chats          Chat[]
  candidates     Candidate[]

  @@index([userId])
  @@index([deletedAt])
  @@map("contexts")
}

model Document {
  id        Int       @id @default(autoincrement())
  fileName  String   @db.Text
  filePath  String   @db.Text
  fileSize  Int
  fileType  String   @db.Text
  createdAt DateTime  @default(now())
  ownerId  Int?

  owner    User?      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  contexts ContextDocument[]
  applications ApplicationDocument[]

  @@map("documents")
}

model ContextDocument {
  id        Int       @id @default(autoincrement())
  contextId Int
  documentId Int
  
  context   Context   @relation(fields: [contextId], references: [id], onDelete: Cascade)
  document  Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([contextId, documentId])
  @@index([contextId])
  @@index([documentId])
  @@map("context_documents")
}

model Chat {
  id        Int       @id @default(autoincrement())
  contextId Int
  difyConversationId String @unique
  title     String?   @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? 
  
  context  Context   @relation(fields: [contextId], references: [id], onDelete: Cascade)
  
  @@index([contextId, difyConversationId])
  @@index([difyConversationId])
  @@map("chats")
}

model Candidate {
  id              Int       @id @default(autoincrement())
  candidateId     String    @unique
  contextId       Int      
  
  name            String    @db.VarChar(255)
  summary         String    @db.Text
  skills          String[]
  experience      String[]
  
  overallScore    Float
  score         Float
  
  justification   String    @db.Text
  keyStrengths    String[]
  keyWeaknesses   String[]
  redFlags        String[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  context         Context   @relation(fields: [contextId], references: [id], onDelete: Cascade)
  
  @@index([contextId, score])
  @@index([candidateId])
  @@index([contextId])
  @@index([deletedAt])
  @@map("candidates")
}

model Applicant {
  id           Int           @id @default(autoincrement())
  userId       Int?          @unique
  fullName     String
  email        String        @unique
  phone        String?
  appliedAt    DateTime      @default(now())
  summary     String?
  skills       Json? // Stores [{ name: String, level: String }]
  experience   Json? // Stores [{ company: String, role: String, startDate: DateTime, endDate: DateTime, description: String }]
  languages    Json? // Stores [{ language: String, proficiency: String }]
  location     String?
  education    Json? // Stores [{ institution: String, degree: String, startDate: DateTime, endDate: DateTime }]


  applications Application[]
  invitations  InterviewInvitation[] // Add this line
  user         User?         @relation(fields: [userId], references: [id])

  @@map("applicants")
  @@index([userId, email])
}

model JobPost {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  location       String?
  employmentType String
  status         String 
  department     String?
  salaryMin      Decimal?      @db.Decimal(12,2)  // Support up to 9,999,999,999.99
  salaryMax      Decimal?      @db.Decimal(12,2)
  currency       String?       // USD, IDR, JPY, etc
  salaryType     String?       // YEARLY, MONTHLY, HOURLY
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  applications   Application[]
  interviews     Interview[]

  @@map("job_posts")
  @@index([title])
  @@index([status])
}

enum Stage {
  APPLIED
  AI_SCREENING
  REVIEW
  OFFER
  HIRED
  REJECTED
}

model Application {
  id             Int                       @id @default(autoincrement())
  applicantId    Int
  jobPostId      Int
  currentStage   Stage                     @default(APPLIED)
  expectedSalary String
  appliedAt      DateTime                  @default(now())
  notes          String?

  applicant      Applicant            @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  jobPost        JobPost                   @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
  stageHistory   ApplicationStageHistory[]
  documents      ApplicationDocument[]

  @@unique([applicantId, jobPostId])
  @@map("applications")
  @@index([jobPostId])
}

model ApplicationDocument {
  id            Int         @id @default(autoincrement())
  applicationId Int
  documentId    Int
  
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  document      Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([applicationId, documentId])
  @@index([applicationId])
  @@index([documentId])
  @@map("application_documents")
}

model ApplicationStageHistory {
  id            Int          @id @default(autoincrement())
  applicationId Int
  stage         Stage
  changedAt     DateTime     @default(now())
  changedById   Int?
  notes         String?

  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
    changedBy     User?        @relation(fields: [changedById], references: [id], onDelete: SetNull)

  @@index([applicationId])
  @@index([changedById])
  @@map("application_stage_history")
}

model Interview {
  id                 Int      @id @default(autoincrement())
  interviewName      String
  skills             Json // Stores [{ name: String, description: String }]
  customQuestionList Json // Stores [{ question: String, time: Int }]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  jobPostId          Int?
  signedUrl          String @default("")

  invitations     InterviewInvitation[] // Add this line
  jobPost           JobPost? @relation(fields: [jobPostId], references: [id], onDelete: Cascade)

  @@map("interviews")
}

enum InterviewInvitationStatus {
  COMPLETED
  INVITED
}

model InterviewInvitation {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  applicantId Int
  interviewId Int
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  status      InterviewInvitationStatus     @default(INVITED)
  dateTaken   DateTime? // Nullable, to be set when the interview is completed

  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade) // Added onDelete: Cascade

  @@map("interview_invitations")
}
